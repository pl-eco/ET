package ch04.game;

public class Constants {
	Asteroids asteroids;
	
	public Constants(Asteroids ast){
		asteroids = ast;
	}
	
	  // Constants
	
		//Mode
	  /*static final*/ //int DELAY = 25;             // Milliseconds between screen and
	
	//given code:
	//Integer delay = new /*@mode(hifi)*/ Integer(25);
	Integer delay = new /*@mode(lofi)*/ Integer(35);
	
	public int getDelay(){
		//given(batteryState()) {
			asteroids.setUpdatePeriod(delay.intValue());
		
			return delay.intValue();
		//}
	}
	  
	  /*static final*/ //int FPS   =                 // the resulting frame rate.
	    //Math.round(1000 / DELAY);
	  public int getFPS(){
		  return Math.round(1000 / getDelay());
	  }

	  static final int MAX_SHOTS =  8;          // Maximum number of sprites
	  static final int MAX_ROCKS =  8;          // for photons, asteroids and
	  static final int MAX_SCRAP = 40;          // explosions.

	  ///*static final*/ int SCRAP_COUNT  = 2 * FPS;  // Timer counter starting values
	  public int getScrapCount(){
		  return 2 * Math.round(1000 / getDelay());
	  }
	  ///*static final*/ int HYPER_COUNT  = 3 * FPS;  // calculated using number of
	  public int getHyperCount(){
		  return 3 * Math.round(1000 / getDelay());
	  }
	  ///*static final*/ int MISSLE_COUNT = 4 * FPS;  // seconds x frames per second.
	  public int getMissleCount(){
		  return 4 * Math.round(1000 / getDelay());
	  }
	  ///*static final*/ int STORM_PAUSE  = 2 * FPS;
	  public int getStormPause(){
		  return 2 * Math.round(1000 / getDelay());
	  }

	  static final int    MIN_ROCK_SIDES =   6; // Ranges for asteroid shape, size
	  static final int    MAX_ROCK_SIDES =  16; // speed and rotation.
	  static final int    MIN_ROCK_SIZE  =  20;
	  static final int    MAX_ROCK_SIZE  =  40;
	  ///*static final*/ double MIN_ROCK_SPEED =  40.0 / FPS;
	  public double getMinRockSpeed(){
		  return 40.0 / Math.round(1000 / getDelay());
	  }
	  ///*static final*/ double MAX_ROCK_SPEED = 240.0 / FPS;
	  public double getMaxRockSpeed(){
		  return 240.0 / Math.round(1000 / getDelay());
	  }
	  ///*static final*/ double MAX_ROCK_SPIN  = Math.PI / FPS;
	  public double getMaxRockSpin(){
		  return Math.PI / Math.round(1000 / getDelay());
	  }

	  static final int MAX_SHIPS = 300;           // Starting number of ships for
	                                            // each game.
	  static final int UFO_PASSES = 3;          // Number of passes for flying
	                                            // saucer per appearance.

	  // Ship's rotation and acceleration rates and maximum speed.

	  ///*static final*/ double SHIP_ANGLE_STEP = Math.PI / FPS;
	  public double getShipAngleStep(){
		  return Math.PI / Math.round(1000 / getDelay());
	  }
	  ///*static final*/ double SHIP_SPEED_STEP = 15.0 / FPS;
	  public double getShipSpeedStep(){
		  return 15.0 / Math.round(1000 / getDelay());
	  }
	  ///*static final*/ double MAX_SHIP_SPEED  = 1.25 * MAX_ROCK_SPEED;
	  public double getMaxShipSpeed(){
		  //double MAX_SHIP_SPEED  = 1.25 * getMaxRockSpeed();
		  return 1.25 * getMaxRockSpeed();
	  }

	  static final int FIRE_DELAY = 50;         // Minimum number of milliseconds
	                                            // required between photon shots.

	  // Probablility of flying saucer firing a missile during any given frame
	  // (other conditions must be met).

	  ///*static final*/ double MISSLE_PROBABILITY = 0.45 / FPS;
	  public double getMissleProbablity(){
		  return 0.45 / Math.round(1000 / getDelay());
	  }

	  static final int BIG_POINTS    =  25;     // Points scored for shooting
	  static final int SMALL_POINTS  =  50;     // various objects.
	  static final int UFO_POINTS    = 250;
	  static final int MISSLE_POINTS = 500;

	  // Number of points the must be scored to earn a new ship or to cause the
	  // flying saucer to appear.

	  static final int NEW_SHIP_POINTS = 5000;
	  static final int NEW_UFO_POINTS  = 2750;
	  
	  /*modeVT batteryState() {
		Intent batteryIntent = AsteroidsActivity.battery();
		
		int level = (batteryIntent.getIntExtra("level", 0)) / 100;
		
		if (level > 0.4) return hifi else return lofi;
	}*/
}
